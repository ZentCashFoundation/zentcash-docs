"use strict";(self.webpackChunkzentcash_docs=self.webpackChunkzentcash_docs||[]).push([[9373],{3130:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>s,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"build/daemon-api/daemon-http-rpc-api-methods/info","title":"info","description":"Returns information related to the network and daemon connection.","source":"@site/docs/build/daemon-api/daemon-http-rpc-api-methods/info.md","sourceDirName":"build/daemon-api/daemon-http-rpc-api-methods","slug":"/build/daemon-api/daemon-http-rpc-api-methods/info","permalink":"/docs/build/daemon-api/daemon-http-rpc-api-methods/info","draft":false,"unlisted":false,"editUrl":"https://github.com/ZentCashFoundation/zentcash-docs/tree/main/docs/build/daemon-api/daemon-http-rpc-api-methods/info.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"buildSidebar","previous":{"title":"getpeers","permalink":"/docs/build/daemon-api/daemon-http-rpc-api-methods/getpeers"},"next":{"title":"height","permalink":"/docs/build/daemon-api/daemon-http-rpc-api-methods/height"}}');var r=t(4848),i=t(8453);const s={sidebar_position:7},a=void 0,c={},d=[{value:"Request:",id:"request",level:3},{value:"Request description:",id:"request-description",level:3},{value:"Response:",id:"response",level:3},{value:"Response description:",id:"response-description",level:3}];function h(e){const n={a:"a",code:"code",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Returns information related to the network and daemon connection."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"URL:"})," ",(0,r.jsx)(n.a,{href:"http://127.0.0.1:21698/info",children:"http://127.0.0.1:21698/info"})]}),"\n",(0,r.jsx)(n.h3,{id:"request",children:"Request:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{})}),"\n",(0,r.jsx)(n.h3,{id:"request-description",children:"Request description:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"  \n"})}),"\n",(0,r.jsx)(n.h3,{id:"response",children:"Response:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'{\r\n  "height": 2789083,\r\n  "difficulty": 10132268,\r\n  "tx_count": 690470,\r\n  "tx_pool_size": 0,\r\n  "alt_blocks_count": 1,\r\n  "outgoing_connections_count": 2,\r\n  "incoming_connections_count": 5,\r\n  "white_peerlist_size": 4,\r\n  "grey_peerlist_size": 23,\r\n  "last_known_block_index": 2789081,\r\n  "network_height": 2789083,\r\n  "upgrade_heights": [\r\n    0,\r\n    1,\r\n    2,\r\n    3,\r\n    11000,\r\n    150000,\r\n    450000,\r\n    800000,\r\n    1000000,\r\n    1300000,\r\n    1400000,\r\n    1600000,\r\n    1800000,\r\n    2000000,\r\n    2200000,\r\n    2400000,\r\n    2600000,\r\n    28000000,\r\n    30000000\r\n  ],\r\n  "supported_height": 28000000,\r\n  "hashrate": 168871,\r\n  "synced": true,\r\n  "major_version": 6,\r\n  "minor_version": 0,\r\n  "version": "1.28.4",\r\n  "status": "OK",\r\n  "start_time": 1739630536\r\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"response-description",children:"Response description:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'  "height": Daemon height. index of the last locally stored block. different from network_height when syncing the network, or when just found a block.\r\n  "difficulty": Difficulty of the top block\r\n  "tx_count": Total number of non-coinbase transaction in the chain.\r\n  "tx_pool_size": Number of transactions that have been broadcast but not included in a block.\r\n  "alt_blocks_count": The number of blocks on alternative (split) chains since the start of the daemon\r\n  "outgoing_connections_count": Number of outgoing connections from the daemon\r\n  "incoming_connections_count": Number of peers connected to and pulling from this daemon node\r\n  "white_peerlist_size": List of online peers\r\n  "grey_peerlist_size": List of peers that were alive but not any more (offline)\r\n  "last_known_block_index": Last known block index \r\n  "network_height": Blockchain length reported by peers. the longest value given by any connected peer\r\n  "upgrade_heights": Pre-determined fork heights. blockchain heights where it forked\r\n  "supported_height": The height of the blockchain for supported fork. if forked after this block height, this version does not support it\r\n  "hashrate": estimated network hashrate for given block (top block if general chain info) = difficulty / 60s (block time target)\r\n  "synced": Sync status. Does the height of this node match the height of the network?\r\n  "major_version": Blockchain major version. such as hash algorithm change\r\n  "minor_version": Blockchain minor version. for example, difficulty algo adjustment. rarely used\r\n  "version": Version of the daemon software\r\n  "status": Status of request\r\n  "start_time": The time when this daemon was started\n'})})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var o=t(6540);const r={},i=o.createContext(r);function s(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);