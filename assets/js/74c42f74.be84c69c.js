"use strict";(self.webpackChunkzentcash_docs=self.webpackChunkzentcash_docs||[]).push([[2826],{7590:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"mine/sbc-mining/mining-with-sbc","title":"Mining with a SBC","description":"The following guide will show you how to compile a CPU miner (XMRig) for SBCs like the Raspberry Pi.","source":"@site/docs/mine/sbc-mining/mining-with-sbc.md","sourceDirName":"mine/sbc-mining","slug":"/mine/sbc-mining/mining-with-sbc","permalink":"/docs/mine/sbc-mining/mining-with-sbc","draft":false,"unlisted":false,"editUrl":"https://github.com/ZentCashFoundation/zentcash-docs/tree/main/docs/mine/sbc-mining/mining-with-sbc.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Mining with a SBC","sidebar_position":1},"sidebar":"mineSidebar","previous":{"title":"SBC Mining","permalink":"/docs/category/sbc-mining"},"next":{"title":"Optimizing Mining on a RPi","permalink":"/docs/mine/sbc-mining/optimizing-rpi-zent-cash-mining"}}');var r=i(4848),o=i(8453);const t={title:"Mining with a SBC",sidebar_position:1},c=void 0,l={},d=[{value:"Setup",id:"setup",level:2},{value:"Compiling XMRig",id:"compiling-xmrig",level:2},{value:"Configuring and Running XMRig",id:"configuring-and-running-xmrig",level:2}];function a(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"The following guide will show you how to compile a CPU miner (XMRig) for SBCs like the Raspberry Pi."}),"\n",(0,r.jsxs)(n.p,{children:["If you're using a RPi3 or RPi3B+, check out ",(0,r.jsx)(n.a,{href:"optimizing-rpi-zent-cash-mining",children:"this guide"})," for a more optimized setup."]}),"\n",(0,r.jsx)(n.p,{children:"What are the benefits of compiling XMRig from scratch?"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"You'll have the most up-to-date version of XMRig"}),"\n",(0,r.jsx)(n.li,{children:"You can optimize XMRig for specific SBCs (improves hash rate)"}),"\n",(0,r.jsx)(n.li,{children:"You can compile XMRig with different releases of GCC (may improve hash rate)"}),"\n",(0,r.jsxs)(n.li,{children:["It's possible to disable certain features of XMRig (",(0,r.jsx)(n.a,{href:"https://xmrig.com/docs/miner/cmake-options",children:"more info"}),")"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,r.jsx)(n.p,{children:"First we want to make sure your SBC's software is up to date:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"sudo apt-get update && sudo apt-get upgrade\n"})}),"\n",(0,r.jsx)(n.p,{children:"After that's done, we're going to install some tools that are important for the process:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"sudo apt-get install git build-essential cmake make libuv1-dev libmicrohttpd-dev gcc g++ automake autoconf pkg-config libcurl4-openssl-dev libjansson-dev libssl-dev libgmp-dev\n"})}),"\n",(0,r.jsx)(n.h2,{id:"compiling-xmrig",children:"Compiling XMRig"}),"\n",(0,r.jsxs)(n.p,{children:["At this step we'll obtain the latest binaries of XMRig and create a directory called ",(0,r.jsx)(n.code,{children:"build"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cd ~\r\ngit clone https://github.com/xmrig/xmrig.git\r\ncd xmrig && mkdir build && cd build\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Now we specify the build flags to optimize XMRig for your SBC in particular. You'll have to ",(0,r.jsx)(n.strong,{children:"only choose one of these"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"for any SBC:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"cmake ..\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"for the Raspberry Pi 2:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'cmake .. -DCMAKE_C_FLAGS="-mcpu=cortex-a7 -mtune=cortex-a7" -DCMAKE_CXX_FLAGS="-mcpu=cortex-a7 -mtune=cortex-a7"\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"for the Raspberry Pi 3:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'cmake .. -DCMAKE_C_FLAGS="-mcpu=cortex-a53 -mtune=cortex-a53" -DCMAKE_CXX_FLAGS="-mcpu=cortex-a53 -mtune=cortex-a53"\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"for the Asus Tinker Board:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'cmake .. -DCMAKE_C_FLAGS="-march=armv7-a" -DCMAKE_CXX_FLAGS="-march=armv7-a"\r\n\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You may find the right flags for your board ",(0,r.jsx)(n.a,{href:"https://gist.github.com/fm4dd/c663217935dc17f0fc73c9c81b0aa845",children:"here"}),".\r\nI was only able to test these on a Raspberry Pi 2 and the Asus Tinker Board. Also, this guide is not perfect, so ",(0,r.jsx)(n.strong,{children:"feel free to add/edit flags or devices"}),"!"]}),"\n",(0,r.jsx)(n.p,{children:"To finish the compilation type:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"make\n"})}),"\n",(0,r.jsxs)(n.p,{children:["To speed up the compilation you can add ",(0,r.jsx)(n.code,{children:"-j [amount_of_CPU_cores]"}),". On a Raspberry Pi 2/3 this would be ",(0,r.jsx)(n.code,{children:"make -j 4"})," for example."]}),"\n",(0,r.jsx)(n.h2,{id:"configuring-and-running-xmrig",children:"Configuring and Running XMRig"}),"\n",(0,r.jsxs)(n.p,{children:["First we need to copy ",(0,r.jsx)(n.code,{children:"config.json"})," to the same directory the XMRig executable is located:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"cp ~/xmrig/src/config.json config.json\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Now we have to edit the configuration file properly. In this guide we'll be using ",(0,r.jsx)(n.code,{children:"nano"}),", but any other text editor should also work fine:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"nano config.json\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Your terminal should display the contents of ",(0,r.jsx)(n.code,{children:"config.json"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'   algo: "[algorithm]"\r\n   url: "[pool address]"\r\n   user: "[wallet address]"\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Instead of ",(0,r.jsx)(n.code,{children:"[algorithm]"}),", simply type ",(0,r.jsx)(n.code,{children:"argon2/chukwa"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["In place of ",(0,r.jsx)(n.code,{children:"[pool address]"}),", you'll need to choose a pool to mine towards. You can learn more about them ",(0,r.jsx)(n.a,{href:"../pools",children:"here"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Instead of ",(0,r.jsx)(n.code,{children:"[wallet address]"}),", simply paste your Zent Cash wallet's address.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"If you don't have one yet, you can find out how to create a wallet here."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"When you're done with that, press:"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"CTRL + O"})," to save, confirm with ",(0,r.jsx)(n.code,{children:"Enter"}),". And after that, hit ",(0,r.jsx)(n.code,{children:"CTRL + X"})," to close the file."]}),"\n",(0,r.jsx)(n.p,{children:"Then start the miner:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"./xmrig\n"})}),"\n",(0,r.jsx)(n.p,{children:"After entering this command, the miner will start scanning your hardware and begin to mine."}),"\n",(0,r.jsx)(n.p,{children:"Congratulations! You did it!"})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>c});var s=i(6540);const r={},o=s.createContext(r);function t(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);